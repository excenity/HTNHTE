fp_add_header("Gender" |> fp_txt_bold(), position = 3, is.summary = F) |> fp_add_header("Race/Ethnicity" |> fp_txt_bold(), position = 6, is.summary = F) |> fp_add_header("Insurance Type" |> fp_txt_bold(), position = 11, is.summary = F) |> fp_add_header("Other Covariates" |> fp_txt_bold(), position = 16, is.summary = F) |> fp_add_header("Race/Ethnicity * Insurance Interaction" |> fp_txt_bold(), position = 20, is.summary = F) |> fp_add_header("Race/Ethnicity * ADI Interaction" |> fp_txt_bold(), position = 33, is.summary = F) |> fp_add_header("Race/Ethnicity * Years In System Interaction" |> fp_txt_bold(), position = 38, is.summary = F) |> fp_add_header("Race/Ethnicity * Distance to Clinic Interaction" |> fp_txt_bold(), position = 43, is.summary = F)
coefs_model5_forestplot %>% forestplot(labeltext = tabletext,
is.summary = c(T, rep(F, nrow(coefs_model5_forestplot))),
zero = 1,
cex = 2,
lineheight = 'auto',
lty.ci = 'solid',
hrzl_lines = gpar(col = "#444444"),
boxsize = 0.15,
xlog = T,
lineheight = 2,
xlab = 'Less Likely to Use Telemedicine <-- --> More Likely to Use Telemedicine') |>
fp_add_header("Gender" |> fp_txt_bold(), position = 3, is.summary = F) |> fp_add_header("Race/Ethnicity" |> fp_txt_bold(), position = 6, is.summary = F) |> fp_add_header("Insurance Type" |> fp_txt_bold(), position = 11, is.summary = F) |> fp_add_header("Other Covariates" |> fp_txt_bold(), position = 16, is.summary = F) |> fp_add_header("Race/Ethnicity * Insurance Interaction" |> fp_txt_bold(), position = 20, is.summary = F) |> fp_add_header("Race/Ethnicity * ADI Interaction" |> fp_txt_bold(), position = 33, is.summary = F) |> fp_add_header("Race/Ethnicity * Years In System Interaction" |> fp_txt_bold(), position = 38, is.summary = F) |> fp_add_header("Race/Ethnicity * Distance to Clinic Interaction" |> fp_txt_bold(), position = 43, is.summary = F)
coefs_model5_forestplot %>% forestplot(labeltext = tabletext,
is.summary = c(T, rep(F, nrow(coefs_model5_forestplot))),
zero = 1,
cex = 2,
lineheight = 'auto',
lty.ci = 'solid',
hrzl_lines = gpar(col = "#444444"),
boxsize = 0.15,
xlog = T,
lineheight = unit(2, 'cm'),
xlab = 'Less Likely to Use Telemedicine <-- --> More Likely to Use Telemedicine') |>
fp_add_header("Gender" |> fp_txt_bold(), position = 3, is.summary = F) |> fp_add_header("Race/Ethnicity" |> fp_txt_bold(), position = 6, is.summary = F) |> fp_add_header("Insurance Type" |> fp_txt_bold(), position = 11, is.summary = F) |> fp_add_header("Other Covariates" |> fp_txt_bold(), position = 16, is.summary = F) |> fp_add_header("Race/Ethnicity * Insurance Interaction" |> fp_txt_bold(), position = 20, is.summary = F) |> fp_add_header("Race/Ethnicity * ADI Interaction" |> fp_txt_bold(), position = 33, is.summary = F) |> fp_add_header("Race/Ethnicity * Years In System Interaction" |> fp_txt_bold(), position = 38, is.summary = F) |> fp_add_header("Race/Ethnicity * Distance to Clinic Interaction" |> fp_txt_bold(), position = 43, is.summary = F)
coefs_model5_forestplot %>% forestplot(labeltext = tabletext,
is.summary = c(T, rep(F, nrow(coefs_model5_forestplot))),
zero = 1,
cex = 2,
lineheight = 'auto',
lty.ci = 'solid',
hrzl_lines = gpar(col = "#444444"),
boxsize = 0.15,
xlog = T,
line.margin = unit(2, 'cm'),
xlab = 'Less Likely to Use Telemedicine <-- --> More Likely to Use Telemedicine') |>
fp_add_header("Gender" |> fp_txt_bold(), position = 3, is.summary = F) |> fp_add_header("Race/Ethnicity" |> fp_txt_bold(), position = 6, is.summary = F) |> fp_add_header("Insurance Type" |> fp_txt_bold(), position = 11, is.summary = F) |> fp_add_header("Other Covariates" |> fp_txt_bold(), position = 16, is.summary = F) |> fp_add_header("Race/Ethnicity * Insurance Interaction" |> fp_txt_bold(), position = 20, is.summary = F) |> fp_add_header("Race/Ethnicity * ADI Interaction" |> fp_txt_bold(), position = 33, is.summary = F) |> fp_add_header("Race/Ethnicity * Years In System Interaction" |> fp_txt_bold(), position = 38, is.summary = F) |> fp_add_header("Race/Ethnicity * Distance to Clinic Interaction" |> fp_txt_bold(), position = 43, is.summary = F)
coefs_model5_forestplot %>% forestplot(labeltext = tabletext,
is.summary = c(T, rep(F, nrow(coefs_model5_forestplot))),
zero = 1,
cex = 2,
lineheight = 'auto',
lty.ci = 'solid',
hrzl_lines = gpar(col = "#444444"),
boxsize = 0.15,
xlog = T,
line.margin = unit(2, 'cm'),
xlab = 'Less Likely to Use Telemedicine <-- --> More Likely to Use Telemedicine') |>
fp_add_header("Gender" |> fp_txt_bold(), position = 3, is.summary = F) |> fp_add_header("Race/Ethnicity" |> fp_txt_bold(), position = 6, is.summary = F) |> fp_add_header("Insurance Type" |> fp_txt_bold(), position = 11, is.summary = F) |> fp_add_header("Other Covariates" |> fp_txt_bold(), position = 16, is.summary = F) |> fp_add_header("Race/Ethnicity * Insurance Interaction" |> fp_txt_bold(), position = 20, is.summary = F) |> fp_add_header("Race/Ethnicity * ADI Interaction" |> fp_txt_bold(), position = 33, is.summary = F) |> fp_add_header("Race/Ethnicity * Years In System Interaction" |> fp_txt_bold(), position = 38, is.summary = F) |> fp_add_header("Race/Ethnicity * Distance to Clinic Interaction" |> fp_txt_bold(), position = 43, is.summary = F)
```{r, fig.height = 12, fig.width = 12}
coefs_model5_forestplot %>% forestplot(labeltext = tabletext,
is.summary = c(T, rep(F, nrow(coefs_model5_forestplot))),
zero = 1,
cex = 2,
lineheight = 'auto',
lty.ci = 'solid',
hrzl_lines = gpar(col = "#444444"),
boxsize = 0.15,
xlog = T,
line.margin = unit(2, 'cm'),
xlab = 'Less Likely to Use Telemedicine <-- --> More Likely to Use Telemedicine') |>
fp_add_header("Gender" |> fp_txt_bold(), position = 3, is.summary = F) |> fp_add_header("Race/Ethnicity" |> fp_txt_bold(), position = 6, is.summary = F) |> fp_add_header("Insurance Type" |> fp_txt_bold(), position = 11, is.summary = F) |> fp_add_header("Other Covariates" |> fp_txt_bold(), position = 16, is.summary = F) |> fp_add_header("Race/Ethnicity * Insurance Interaction" |> fp_txt_bold(), position = 20, is.summary = F) |> fp_add_header("Race/Ethnicity * ADI Interaction" |> fp_txt_bold(), position = 33, is.summary = F) |> fp_add_header("Race/Ethnicity * Years In System Interaction" |> fp_txt_bold(), position = 38, is.summary = F) |> fp_add_header("Race/Ethnicity * Distance to Clinic Interaction" |> fp_txt_bold(), position = 43, is.summary = F)
library(HTNHTE)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
RF.learners$names
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", xgboost.learners$names, RF.learners$names, enet$names)
SL.library.chosen
xgb_5_2_0.1
# TMLE
# there is a bug in tmle where IC.ATC is not defined
#env <- environment(fun = tmle::tmle)
#env$IC.ATC <- NULL
tmle_fit = tmle::tmle(Y = tmle_Y, #control_6months/SBP_diff_6months
A = intervention_levels,
W = X,
Q.SL.library = xgb_5_2_0.1,
g.SL.library = xgb_5_2_0.1,
family = tmle_family,
gbound = 0.05
)
rm(list = RF.learners$names)
rm(list = xgboost.learners$names)
rm(list = enet$names)
library(HTNHTE)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
source("~/Documents/HSIP/Research/Dissertation Project/Code/HTNHTE/R/3_TMLEanalysis.R", echo=TRUE)
library(HTNHTE)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
learners = new.env()
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500), env = learners, detailed_names = T)
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = T, name_prefix = "xgb", env = learners)
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)), env = learners)
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", RF.learners$names, xgboost.learners$names, enet$names)
print(SL.library.chosen)
SL.library.chosen
enet
enet$names
enet$params
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
?superlearner
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500), detailed_names = T)
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = T, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", RF.learners$names, xgboost.learners$names, enet$names)
print(SL.library.chosen)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
library(HTNHTE)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
### Create Learners for SL
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500), detailed_names = T)
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = T, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", RF.learners$names, xgboost.learners$names, enet$names)
print(SL.library.chosen)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
### Create Learners for SL
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500), detailed_names = T)
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = T, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", RF.learners$names, xgboost.learners$names, enet$names)
print(SL.library.chosen)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
### Create Learners for SL
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500), detailed_names = T)
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = T, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", RF.learners$names, xgboost.learners$names, enet$names)
print(SL.library.chosen)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
##### PLEASE EDIT #####
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
##### PLEASE EDIT #####
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = T,
extractingData = T,
runStatisticsAnalysis = F,
runTreatmentEffects = F
)
##### PLEASE EDIT #####
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = T,
extractingData = T,
runStatisticsAnalysis = F,
runTreatmentEffects = F
)
##### PLEASE EDIT #####
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
##### PLEASE EDIT #####
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_120424',
generateCohorts = T,
extractingData = T,
runStatisticsAnalysis = T,
runTreatmentEffects = F
)
library(HTNHTE)
