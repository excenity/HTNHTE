df$acei_diuretic[df$acei == 1 & df$diuretic == 1] = 1
df$acei_ccb[df$acei == 1 & df$ccb == 1] = 1
df$arb_diuretic[df$arb == 1 & df$diuretic == 1] = 1
df$arb_ccb[df$arb == 1 & df$ccb == 1] = 1
# create broad combo classes
df$diuretic_combo = ifelse(df$acei_diuretic == 1 | df$arb_diuretic == 1, 1, 0)
df$ccb_combo = ifelse(df$acei_ccb == 1 | df$arb_ccb == 1, 1, 0)
# remove those with more than 3 classes
df = df %>% filter(diuretic_combo == 1 & ccb == 1 | diuretic_combo == 1 & bb == 1)
df = df %>% filter(ccb_combo == 1 & diuretic == 1 | ccb_combo == 1 & bb == 1)
# reset single medication classes for dual therapies
df$acei[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$arb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$ccb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$diuretic[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
head(df)
# creating dataframe
df = as.data.frame(as.matrix(data$dataMatrix))
df_headers = as.data.frame(data$covariateRef)
headers = c('age', 'sbp', 'dbp', 'chol', 'ldl', 'creatinine', 'bmi_neg', 'hba1c', 'sbp_6m', 'dbp_6m', 'male', 'asian', 'black', 'white', 'female',
'gender_unknown', 'race_unknown', 'pacific_islander', 'american_indian', 'acei', 'acei_diuretic', 'antidepressants', 'arb', 'arb_diuretic',
'dm', 'ckd', 'sleep_apnea', 'hf', 'hormonal_therapy', 'statins', 'ppi', 'bb', 'ccb', 'diuretic', 'hispanic', 'non-hispanic', 'asian_indian',
'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific')
names(df) = headers
## Exclusions
# remove participants aged under 18
df = df %>% filter(age >= 18)
# remove those without baseline or 6m SBP or DBP
df = df %>% filter(sbp != 0 & dbp != 0 & sbp_6m != 0 & dbp_6m != 0)
## Wrangle Demographic Variables
# combine asian races
df$asian = ifelse(df$asian + df$pacific_islander + df$american_indian + df$asian_indian + df$chinese +
df$filipino + df$japanese + df$korean + df$vietnamese + df$other_pacific >= 1, 1, 0)
df = df %>% select(-c('pacific_islander', 'american_indian', 'asian_indian', 'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific'))
df$pid = 1:nrow(df)
race_df = df %>% select('pid', 'asian', 'black', 'white') %>% pivot_longer(cols = c('asian', 'black', 'white'), values_to = 'race')
race_df = race_df %>% filter(race == 1) %>% select('pid', 'name')
names(race_df)[2] = 'race'
df = left_join(df, race_df)
df$race[is.na(df$race)] = 'other'
df$race[df$race_unknown == 1] = NA
df = df %>% select(-c('asian', 'black', 'white', 'race_unknown'))
# combine ethnicities
df = df %>% select(-'non-hispanic')
# combine genders
df$male[df$gender_unknown == 1] = NA
df$gender = df$male
df = df %>% select(-c('female', 'gender_unknown', 'male'))
head(df)
df$acei_diuretic[df$acei == 1 & df$diuretic == 1] = 1
df$acei_ccb[df$acei == 1 & df$ccb == 1] = 1
df$arb_diuretic[df$arb == 1 & df$diuretic == 1] = 1
df$arb_ccb[df$arb == 1 & df$ccb == 1] = 1
haed(df)
head(df)
df[is.na(df)] = 0
head(df)
df$diuretic_combo = ifelse(df$acei_diuretic == 1 | df$arb_diuretic == 1, 1, 0)
df$ccb_combo = ifelse(df$acei_ccb == 1 | df$arb_ccb == 1, 1, 0)
head(df)
df = df %>% filter(diuretic_combo == 1 & ccb == 1 | diuretic_combo == 1 & bb == 1)
df = df %>% filter(ccb_combo == 1 & diuretic == 1 | ccb_combo == 1 & bb == 1)
# creating dataframe
df = as.data.frame(as.matrix(data$dataMatrix))
df_headers = as.data.frame(data$covariateRef)
headers = c('age', 'sbp', 'dbp', 'chol', 'ldl', 'creatinine', 'bmi_neg', 'hba1c', 'sbp_6m', 'dbp_6m', 'male', 'asian', 'black', 'white', 'female',
'gender_unknown', 'race_unknown', 'pacific_islander', 'american_indian', 'acei', 'acei_diuretic', 'antidepressants', 'arb', 'arb_diuretic',
'dm', 'ckd', 'sleep_apnea', 'hf', 'hormonal_therapy', 'statins', 'ppi', 'bb', 'ccb', 'diuretic', 'hispanic', 'non-hispanic', 'asian_indian',
'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific')
names(df) = headers
## Exclusions
# remove participants aged under 18
df = df %>% filter(age >= 18)
# remove those without baseline or 6m SBP or DBP
df = df %>% filter(sbp != 0 & dbp != 0 & sbp_6m != 0 & dbp_6m != 0)
## Wrangle Demographic Variables
# combine asian races
df$asian = ifelse(df$asian + df$pacific_islander + df$american_indian + df$asian_indian + df$chinese +
df$filipino + df$japanese + df$korean + df$vietnamese + df$other_pacific >= 1, 1, 0)
df = df %>% select(-c('pacific_islander', 'american_indian', 'asian_indian', 'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific'))
df$pid = 1:nrow(df)
race_df = df %>% select('pid', 'asian', 'black', 'white') %>% pivot_longer(cols = c('asian', 'black', 'white'), values_to = 'race')
race_df = race_df %>% filter(race == 1) %>% select('pid', 'name')
names(race_df)[2] = 'race'
df = left_join(df, race_df)
df$race[is.na(df$race)] = 'other'
df$race[df$race_unknown == 1] = NA
df = df %>% select(-c('asian', 'black', 'white', 'race_unknown'))
# combine ethnicities
df = df %>% select(-'non-hispanic')
# combine genders
df$male[df$gender_unknown == 1] = NA
df$gender = df$male
df = df %>% select(-c('female', 'gender_unknown', 'male'))
## Medication Assignment
# create individual dual combo classes
df$acei_diuretic[df$acei == 1 & df$diuretic == 1] = 1
df$acei_ccb[df$acei == 1 & df$ccb == 1] = 1
df$arb_diuretic[df$arb == 1 & df$diuretic == 1] = 1
df$arb_ccb[df$arb == 1 & df$ccb == 1] = 1
df[is.na(df)] = 0
# create broad combo classes
df$diuretic_combo = ifelse(df$acei_diuretic == 1 | df$arb_diuretic == 1, 1, 0)
df$ccb_combo = ifelse(df$acei_ccb == 1 | df$arb_ccb == 1, 1, 0)
# remove those with more than 3 classes
df = df %>% filter(diuretic_combo != 1 & ccb != 1 | diuretic_combo != 1 & bb != 1)
df = df %>% filter(ccb_combo != 1 & diuretic != 1 | ccb_combo != 1 & bb != 1)
# reset single medication classes for dual therapies
df$acei[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$arb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$ccb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$diuretic[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
head(df)
?pivot_longer
?melt
library(tidyverse)
?melt
??melt
## combine variables
med_class_df = df %>% select(pid, acei, arb, ccb, diuretic, ccb_combo, diuretic_combo) %>% pivot_longer(cols = acei:diuretic_combo, names_to = 'med_class', values_to = 'value')
View(med_class_df)
## combine variables
med_class_df = df %>% select(pid, acei, arb, ccb, diuretic, ccb_combo, diuretic_combo) %>% pivot_longer(cols = acei:diuretic_combo, names_to = 'med_class', values_to = 'value') %>% filter(value == 1)
View(med_class_df)
med_class_df
df %>% distinct(pid) %>% count()
View(med_class_df)
df = left_join(df, med_class_df %>% select(-value))
View(df)
## combine variables
med_class_df = df %>% select(pid, acei, arb, bb, ccb, diuretic, ccb_combo, diuretic_combo) %>% pivot_longer(cols = acei:diuretic_combo, names_to = 'med_class', values_to = 'value') %>% filter(value == 1)
# creating dataframe
df = as.data.frame(as.matrix(data$dataMatrix))
df_headers = as.data.frame(data$covariateRef)
headers = c('age', 'sbp', 'dbp', 'chol', 'ldl', 'creatinine', 'bmi_neg', 'hba1c', 'sbp_6m', 'dbp_6m', 'male', 'asian', 'black', 'white', 'female',
'gender_unknown', 'race_unknown', 'pacific_islander', 'american_indian', 'acei', 'acei_diuretic', 'antidepressants', 'arb', 'arb_diuretic',
'dm', 'ckd', 'sleep_apnea', 'hf', 'hormonal_therapy', 'statins', 'ppi', 'bb', 'ccb', 'diuretic', 'hispanic', 'non-hispanic', 'asian_indian',
'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific')
names(df) = headers
## Exclusions
# remove participants aged under 18
df = df %>% filter(age >= 18)
# remove those without baseline or 6m SBP or DBP
df = df %>% filter(sbp != 0 & dbp != 0 & sbp_6m != 0 & dbp_6m != 0)
## Wrangle Demographic Variables
# combine asian races
df$asian = ifelse(df$asian + df$pacific_islander + df$american_indian + df$asian_indian + df$chinese +
df$filipino + df$japanese + df$korean + df$vietnamese + df$other_pacific >= 1, 1, 0)
df = df %>% select(-c('pacific_islander', 'american_indian', 'asian_indian', 'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific'))
df$pid = 1:nrow(df)
race_df = df %>% select('pid', 'asian', 'black', 'white') %>% pivot_longer(cols = c('asian', 'black', 'white'), values_to = 'race')
race_df = race_df %>% filter(race == 1) %>% select('pid', 'name')
names(race_df)[2] = 'race'
df = left_join(df, race_df)
df$race[is.na(df$race)] = 'other'
df$race[df$race_unknown == 1] = NA
df = df %>% select(-c('asian', 'black', 'white', 'race_unknown'))
# combine ethnicities
df = df %>% select(-'non-hispanic')
# combine genders
df$male[df$gender_unknown == 1] = NA
df$gender = df$male
df = df %>% select(-c('female', 'gender_unknown', 'male'))
## Medication Assignment
# create individual dual combo classes
df$acei_diuretic[df$acei == 1 & df$diuretic == 1] = 1
df$acei_ccb[df$acei == 1 & df$ccb == 1] = 1
df$arb_diuretic[df$arb == 1 & df$diuretic == 1] = 1
df$arb_ccb[df$arb == 1 & df$ccb == 1] = 1
df[is.na(df)] = 0
# create broad combo classes
df$diuretic_combo = ifelse(df$acei_diuretic == 1 | df$arb_diuretic == 1, 1, 0)
df$ccb_combo = ifelse(df$acei_ccb == 1 | df$arb_ccb == 1, 1, 0)
# remove those with more than 3 classes
df = df %>% filter(diuretic_combo != 1 & ccb != 1 | diuretic_combo != 1 & bb != 1)
df = df %>% filter(ccb_combo != 1 & diuretic != 1 | ccb_combo != 1 & bb != 1)
# reset single medication classes for dual therapies
df$acei[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$arb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$ccb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$diuretic[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
## combine variables
med_class_df = df %>% select(pid, acei, arb, bb, ccb, diuretic, ccb_combo, diuretic_combo) %>% pivot_longer(cols = acei:diuretic_combo, names_to = 'med_class', values_to = 'value') %>% filter(value == 1)
df = left_join(df, med_class_df %>% select(-value))
View(df)
table(df$med_class)
# creating dataframe
df = as.data.frame(as.matrix(data$dataMatrix))
df_headers = as.data.frame(data$covariateRef)
headers = c('age', 'sbp', 'dbp', 'chol', 'ldl', 'creatinine', 'bmi_neg', 'hba1c', 'sbp_6m', 'dbp_6m', 'male', 'asian', 'black', 'white', 'female',
'gender_unknown', 'race_unknown', 'pacific_islander', 'american_indian', 'acei', 'acei_diuretic', 'antidepressants', 'arb', 'arb_diuretic',
'dm', 'ckd', 'sleep_apnea', 'hf', 'hormonal_therapy', 'statins', 'ppi', 'bb', 'ccb', 'diuretic', 'hispanic', 'non-hispanic', 'asian_indian',
'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific')
names(df) = headers
## Exclusions
# remove participants aged under 18
df = df %>% filter(age >= 18)
# remove those without baseline or 6m SBP or DBP
df = df %>% filter(sbp != 0 & dbp != 0 & sbp_6m != 0 & dbp_6m != 0)
## Wrangle Demographic Variables
# combine asian races
df$asian = ifelse(df$asian + df$pacific_islander + df$american_indian + df$asian_indian + df$chinese +
df$filipino + df$japanese + df$korean + df$vietnamese + df$other_pacific >= 1, 1, 0)
df = df %>% select(-c('pacific_islander', 'american_indian', 'asian_indian', 'chinese', 'filipino', 'japanese', 'korean', 'vietnamese', 'other_pacific'))
df$pid = 1:nrow(df)
race_df = df %>% select('pid', 'asian', 'black', 'white') %>% pivot_longer(cols = c('asian', 'black', 'white'), values_to = 'race')
race_df = race_df %>% filter(race == 1) %>% select('pid', 'name')
names(race_df)[2] = 'race'
df = left_join(df, race_df)
df$race[is.na(df$race)] = 'other'
df$race[df$race_unknown == 1] = NA
df = df %>% select(-c('asian', 'black', 'white', 'race_unknown'))
# combine ethnicities
df = df %>% select(-'non-hispanic')
# combine genders
df$male[df$gender_unknown == 1] = NA
df$gender = df$male
df = df %>% select(-c('female', 'gender_unknown', 'male'))
## Medication Assignment
# create individual dual combo classes
df$acei_diuretic[df$acei == 1 & df$diuretic == 1] = 1
df$acei_ccb[df$acei == 1 & df$ccb == 1] = 1
df$arb_diuretic[df$arb == 1 & df$diuretic == 1] = 1
df$arb_ccb[df$arb == 1 & df$ccb == 1] = 1
df[is.na(df)] = 0
# create broad combo classes
df$diuretic_combo = ifelse(df$acei_diuretic == 1 | df$arb_diuretic == 1, 1, 0)
df$ccb_combo = ifelse(df$acei_ccb == 1 | df$arb_ccb == 1, 1, 0)
# remove those with more than 3 classes
df = df %>% filter(diuretic_combo + ccb < 2 | diuretic_combo + bb < 2)
df = df %>% filter(ccb_combo + diuretic < 2 | ccb_combo + bb < 2)
# reset single medication classes for dual therapies
df$acei[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$arb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$ccb[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
df$diuretic[df$diuretic_combo == 1 | df$ccb_combo == 1] = 0
med_class_df = df %>% select(pid, acei, arb, bb, ccb, diuretic, ccb_combo, diuretic_combo) %>% pivot_longer(cols = acei:diuretic_combo, names_to = 'med_class', values_to = 'value') %>% filter(value == 1)
df = left_join(df, med_class_df %>% select(-value))
table(df$med_class)
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(tidyverse)
library(data.table)
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
# getting the covariates data from cohorts as well as generating analytic dataset
omop_df = getData(
cdmDatabaseSchema = 'htnhte',
connectionDetails = connectionDetails,
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte'
)
# generate dataset for analysis
df = generateAnalyticDataset(omop_df)
if (outcome == 'at_control_14090')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'at_control_13080')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_13080_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'sbp_change')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_sbp_change_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
}
outcome = 'at_control_14090'
htn_med_class_i = 1
library(grf)
if (outcome == 'at_control_14090')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'at_control_13080')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_13080_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'sbp_change')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_sbp_change_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
}
# create results folder
path = getwd()
if (outcome == 'at_control_14090')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'at_control_13080')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_13080_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'sbp_change')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_sbp_change_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
}
if (outcome == 'at_control_14090')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'at_control_13080')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_13080_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'sbp_change')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_sbp_change_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
}
data.table()
library(data.table)
if (outcome == 'at_control_14090')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'at_control_13080')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_13080_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'sbp_change')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_sbp_change_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
}
path = getwd()
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
## STEP 1: Calculate ITE and Output Dataset
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
htn_med_class_i='acei'
if (outcome == 'at_control_14090')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_14090_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'at_control_13080')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_at_control_13080_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
} else if (outcome == 'sbp_change')
{
ite = fread(file.path(path, paste0('results/step1_ITE_estimation/ITE_sbp_change_', htn_med_class_i, '.csv')), col.names = c('pid', 'ite'))
}
## Dataset Setup
df$htn_med_class[df$htn_med_class != htn_med_class_i] = 'other'
df$htn_med_class = factor(df$htn_med_class, levels = c('other', htn_med_class_i))
# join dataset
ite = inner_join(ite, df)
# format all categorical variables
ite$race = as.numeric(factor(ite$race))
ite[] = lapply(ite, as.numeric)
X = ite %>% select(-pid, -sbp_change, -bmi_neg, -bp_14090, -bp_13080)
X_headers = as.data.frame(names(X))
X = as.matrix(X)
Y = ite$ite
W = ite$htn_med_class
## Causal Forest Algorithm
set.seed(618)
X
head(X)
head(y)
head(Y)
cf_model = grf::causal_forest(X = X,
Y = Y,
W = W,
num.trees = 5000,
tune.parameters = 'all'
)
head(cf_model)
var_imp = grf::variable_importance(cf_model)
var_imp = as.data.frame(t(var_imp))
names(var_imp) = X_headers$`names(X)`
View(var_imp)
head(var_imp)
var_imp = var_imp %>% gather(key = 'variable', value = 'imp_score')
var_imp = var_imp %>% arrange(desc('imp_score'))
fi_plot = ggplot2::ggplot(var_imp, aes(reorder(x = variable, imp_score), y = imp_score)) + geom_bar(stat= 'identity') + coord_flip() + theme_bw() + ylab('variable importance') +
xlab('variable') + ggtitle(paste0('CF Variable Importance - ', htn_med_class_i))
ggplot2::ggsave(file.path(path, paste0('results/step2_CF_analysis/fi_plot_', outcome, '_', htn_med_class_i, '.png')), fi_plot) # save feature importance plot
print(fi_plot)
table(W)
cf_model = grf::causal_forest(X = X,
Y = Y,
W = W,
num.trees = 1000,
tune.parameters = 'all'
)
X = ite %>% select(-pid, -sbp_change, -bmi_neg, -bp_14090, -bp_13080, ite)
X_headers = as.data.frame(names(X))
X = as.matrix(X)
Y = ite$ite
W = ite$htn_med_class
## Causal Forest Algorithm
set.seed(618)
cf_model = grf::causal_forest(X = X,
Y = Y,
W = W,
num.trees = 1000,
tune.parameters = 'all'
)
var_imp = grf::variable_importance(cf_model)
var_imp = as.data.frame(t(var_imp))
names(var_imp) = X_headers$`names(X)`
var_imp = var_imp %>% gather(key = 'variable', value = 'imp_score')
var_imp = var_imp %>% arrange(desc('imp_score'))
fi_plot = ggplot2::ggplot(var_imp, aes(reorder(x = variable, imp_score), y = imp_score)) + geom_bar(stat= 'identity') + coord_flip() + theme_bw() + ylab('variable importance') +
xlab('variable') + ggtitle(paste0('CF Variable Importance - ', htn_med_class_i))
ggplot2::ggsave(file.path(path, paste0('results/step2_CF_analysis/fi_plot_', outcome, '_', htn_med_class_i, '.png')), fi_plot) # save feature importance plot
print(fi_plot)
X = ite %>% select(-pid, -sbp_change, -bmi_neg, -bp_14090, -bp_13080, -ite)
X_headers = as.data.frame(names(X))
X = as.matrix(X)
Y = ite$ite
W = ite$htn_med_class
head(X)
cf_model = grf::causal_forest(X = X,
Y = Y,
W = W,
num.trees = 1000,
tune.parameters = 'all'
)
var_imp = grf::variable_importance(cf_model)
var_imp = as.data.frame(t(var_imp))
names(var_imp) = X_headers$`names(X)`
# calculate and visualize feature importance
var_imp = var_imp %>% gather(key = 'variable', value = 'imp_score')
var_imp = var_imp %>% arrange(desc('imp_score'))
fi_plot = ggplot2::ggplot(var_imp, aes(reorder(x = variable, imp_score), y = imp_score)) + geom_bar(stat= 'identity') + coord_flip() + theme_bw() + ylab('variable importance') +
xlab('variable') + ggtitle(paste0('CF Variable Importance - ', htn_med_class_i))
ggplot2::ggsave(file.path(path, paste0('results/step2_CF_analysis/fi_plot_', outcome, '_', htn_med_class_i, '.png')), fi_plot) # save feature importance plot
print(fi_plot)
X = ite %>% select(-pid, -sbp_change, -bmi_neg, -bp_14090, -bp_13080, -ite)
X_headers = as.data.frame(names(X))
X = as.matrix(X)
Y = ite$ite
W = ite$htn_med_class
X = ite %>% select(-pid, -sbp_change, -bmi_neg, -bp_14090, -bp_13080, -ite, -htn_med_class)
X_headers = as.data.frame(names(X))
X = as.matrix(X)
Y = ite$ite
W = ite$htn_med_class
## Causal Forest Algorithm
set.seed(618)
cf_model = grf::causal_forest(X = X,
Y = Y,
W = W,
num.trees = 1000,
tune.parameters = 'all'
)
var_imp = grf::variable_importance(cf_model)
var_imp = as.data.frame(t(var_imp))
names(var_imp) = X_headers$`names(X)`
# calculate and visualize feature importance
var_imp = var_imp %>% gather(key = 'variable', value = 'imp_score')
var_imp = var_imp %>% arrange(desc('imp_score'))
fi_plot = ggplot2::ggplot(var_imp, aes(reorder(x = variable, imp_score), y = imp_score)) + geom_bar(stat= 'identity') + coord_flip() + theme_bw() + ylab('variable importance') +
xlab('variable') + ggtitle(paste0('CF Variable Importance - ', htn_med_class_i))
ggplot2::ggsave(file.path(path, paste0('results/step2_CF_analysis/fi_plot_', outcome, '_', htn_med_class_i, '.png')), fi_plot) # save feature importance plot
print(fi_plot)
split_vars = cf_model$`_split_vars`
split_values = cf_model$`_split_values`
split_list = c()
split_values_list = c()
for (i in 1:1000)
{
split_list = c(split_list, unlist(split_vars[i]))
split_values_list = c(split_values_list, unlist(split_values[i]))
}
split_values_df = data.frame(split_vars = split_list,
split_values = split_values_list)
X_headers$split_vars = 1:nrow(X_headers) - 1
split_values_df = left_join(split_values_df, X_headers)
table(split_values_df$`names(X)`)
names(split_values_df) = c('split_vars_i', 'split_value', 'split_var_name')
split_vars_list = as.data.frame(split_values_df %>% distinct(split_var_name))
dir.create(file.path(path, paste0('results/step2_CF_analysis/',  outcome, '_', htn_med_class_i)))
for (i in 1:nrow(split_vars_list))
{
split_chunk = split_values_df %>% filter(split_var_name == split_vars_list[i,])
split_plot = ggplot2::ggplot(split_chunk, aes(x=split_value)) + geom_histogram() + ggtitle(split_vars_list[i,]) + theme_bw()
ggplot2::ggsave(file.path(path, paste0('results/step2_CF_analysis/',  outcome, '_', htn_med_class_i, '/split_values_', i, '.png')), split_plot)
}
split_values_df = split_values_df %>% group_by(split_var_name) %>% summarise_at(vars(split_value), list(mean, sd))
write.csv(split_values_df, file.path(path, paste0('results/step2_CF_analysis/',  outcome, '_', htn_med_class_i, '/split_values.csv')), row.names = F)
View(split_values)
View(omop_df)
head(df)
createPatientProfiles = function(cont_var, df)
{
cont_var_names = paste0(cont_var, '_cat')
for (i in 1:length(cont_var))
{
df$new_col = 0
df$new_col = cut(get(cont_var[i], df), breaks = unlist(cutpoints[i]), include.lowest = T)
names(df)[names(df) == 'new_col'] = cont_var_names[i]
}
df = df %>% unite(col = 'patient_profiles', all_of(c(cont_var_names)), remove = F)
# get list of distinct patient profiles and corresponding variable categories
patient_profile_list = df[,c('patient_profiles', cont_var_names)]
patient_profile_list = patient_profile_list %>% distinct()
return(patient_profile_list)
}
# random forest
RF.learners = create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
library(SuperLearner)
df= read.csv('analytics_df.csv')
df= read.csv('analytic_df.csv')
## STEP 1: Calculate ITE and Output Dataset
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(tidyverse)
library(data.table)
library(SuperLearner)
## STEP 1: Calculate ITE and Output Dataset
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
i =1
ite = step1_ite_SL(i, df, 'at_control_14090')
library(HTNHTE)
devtools::document()
rlang::last_trace()
devtools::document()
