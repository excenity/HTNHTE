cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list,
cont_var = cont_var,
cutpoints = cutpoints
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list_default = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
if(!file.exists(file.path(outputpath, 'data.rds'))){
message('No data - please run with extractingData = T first')
} else{
df <- readRDS(file.path(outputpath, 'data.rds'))
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", enet$names, xgboost.learners$names, RF.learners$names)
}
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824'
if(!file.exists(file.path(outputpath, 'data.rds'))){
message('No data - please run with extractingData = T first')
} else{
df <- readRDS(file.path(outputpath, 'data.rds'))
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", enet$names, xgboost.learners$names, RF.learners$names)
df <- readRDS(file.path(outputpath, 'data.rds'))
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", enet$names, xgboost.learners$names, RF.learners$names)
outcome = 'sbp_change'
result <- TMLE_analysis(
outcome = outcome,
patient_profile_list = patient_profile_list,
htn_med_list = htn_med_list
)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list_default = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
##### PLEASE EDIT #####
connectionDetails = createConnectionDetails(
dbms = "postgresql",
server = 'localhost/HTN_OMOP',
user = 'postgres',
password = '741China@',
pathToDriver = '/Users/excenity/Library/R/jdbcDrivers'
)
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = T,
runStatisticsAnalysis = F,
runTreatmentEffects = F,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list_default = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
source("~/Documents/HSIP/Research/Dissertation Project/Code/HTNHTE/R/execution.R", echo=TRUE)
library(HTNHTE)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
if(!file.exists(file.path(outputpath, 'data.rds'))){
message('No data - please run with extractingData = T first')
} else{
df <- readRDS(file.path(outputpath, 'data.rds'))
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", enet$names, xgboost.learners$names, RF.learners$names)
# TMLE Analysis for Main Outcomes
for(outcome in c('at_control_14090', 'at_control_13080','sbp_change')){
result <- TMLE_analysis(
outcome = outcome,
patient_profile_list = patient_profile_list,
htn_med_list = htn_med_list
)
if(!dir.exists(file.path(outputpath,'tmle_results_df'))){
dir.create(file.path(outputpath,'tmle_results_df'), recursive = T)
}
if(!dir.exists(file.path(outputpath,'tmle_plots'))){
dir.create(file.path(outputpath,'tmle_plots'), recursive = T)
}
write.csv(
x = result$tmleResultsDf,
file = file.path(outputpath,'tmle_results_df', paste0(outcome, '.csv')), row.names = F)
ggplot2::ggsave(
filename = file.path(outputpath,'tmle_plots', paste0(outcome, '.png')),
result$tmlePlot,
height = 16,
width = 30
)
}
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
htn_med_list = htn_med_list_default,
cont_var = cont_var,
cutpoints = cutpoints
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
file.path(outputpath, 'data.rds')
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824'
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
file.path(outputpath, 'data.rds'))
file.path(outputpath, 'data.rds')
df <- readRDS(file.path(outputpath, 'data.rds'))
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
df <- readRDS(file.path(outputpath, 'data.rds'))
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", enet$names, xgboost.learners$names, RF.learners$names)
result <- TMLE_analysis(
outcome = outcome,
patient_profile_list = patient_profile_list,
htn_med_list = htn_med_list
)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
library(HTNHTE)
library(HTNHTE)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
df <- readRDS(file.path(outputpath, 'data.rds'))
head(df)
head(df)
df <- readRDS(file.path(outputpath, 'data.rds'))
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824'
df <- readRDS(file.path(outputpath, 'data.rds'))
head(df)
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
patient_profile_list
head(df)
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
library(HTNHTE)
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
if (!require(SuperLearner))
{
install.packages("SuperLearner")
}
library(HTNHTE)
library(DatabaseConnector)
library(SqlRender)
library(SuperLearner)
library(tidyverse)
# medication type list
htn_med_list = c('acei', 'arb', 'ccb', 'diuretic', 'ccb_combo', 'diuretic_combo')
cont_var = c('sbp', 'ldl', 'age', 'bmi')
cutpoints = list(c(0, 150, 300),
c(0 ,100, 300),
c(0, 65, 150),
c(0, 30, 100))
executeStudy(
connectionDetails = connectionDetails,
cdmDatabaseSchema = 'htnhte',
cohortDatabaseSchema = 'htnhte',
cohortTable = 'htn_hte',
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824',
generateCohorts = F,
extractingData = F,
runStatisticsAnalysis = F,
runTreatmentEffects = T,
cont_var = cont_var,
cutpoints = cutpoints
)
outputpath = '/Users/excenity/Documents/HSIP/Research/Dissertation Project/Results/results_081824'
df <- readRDS(file.path(outputpath, 'data.rds'))
message(paste0('rows of data read:', nrow(df)))
# create patient profiles
df = createPatientProfiles(cont_var, cutpoints, df)
patient_profile_list = df %>% dplyr::distinct(patient_profiles)
# random forest
RF.learners = SuperLearner::create.Learner("SL.ranger", tune = list(mtry = 3, num.trees = 500))
# xgboost
tune = list(ntrees = c(5, 10, 15),
max_depth = 2:5,
eta = c(0.1, 0.05, 0.01))
xgboost.learners = SuperLearner::create.Learner("SL.xgboost", tune = tune, detailed_names = TRUE, name_prefix = "xgb")
# elastic net
enet = SuperLearner::create.Learner("SL.glmnet", detailed_names = T, tune = list(alpha = seq(0, 1, length.out = 5)))
# list libraries
SL.library.chosen = c("SL.mean", "SL.glm", "SL.glm.interaction", enet$names, xgboost.learners$names, RF.learners$names)
outcome = 'sbp_change'
result <- TMLE_analysis(
outcome = outcome,
patient_profile_list = patient_profile_list,
htn_med_list = htn_med_list
)
